initSidebarItems({"enum":[["PositionInTriangulation","Stores information about a point's position in triangulation."]],"struct":[["CCWIterator","An iterator that iterates over the outgoing edges from a vertex."],["ConstrainedDelaunayTriangulation","A two dimensional constrained Delaunay triangulation."],["DelaunayTriangulation","A two dimensional Delaunay triangulation."],["DelaunayWalkLocate","Locate strategy that walks along the edges of a triangulation until the target point is found."],["EdgeHandle","A handle to a directed edge."],["FaceHandle","A handle to a face."],["ONextIterator","An iterator that iterates over the edges adjacent to a face."],["TriangulationWalkLocate",""],["VertexHandle","A handle to a vertex."]],"trait":[["DelaunayLocateStructure","Locate strategy for Delaunay triangulations."]],"type":[["DelaunayTreeLocate","Locate strategy that uses an r-tree to locate points in O(log(n)) time."],["FixedEdgeHandle","Handle to an edge."],["FixedFaceHandle","Handle to a face."],["FixedVertexHandle","Handle to a vertex."],["FloatCDT","Type shorthand for a constrained Delaunay triangulation using the precise `FloatKernel`."],["FloatDelaunayTriangulation","Type shorthand for a Delaunay triangulation with `f64` coordinates that uses `FloatKernel` for geometric calculations."],["IntDelaunayTriangulation","Type shorthand for a Delaunay triangulation with `i64` or `i32` coordinates that uses the trivial kernel for geometric calculations."],["RTreeDelaunayLocate","Locate strategy that uses an r-tree to locate points in O(log(n)) time."]]});